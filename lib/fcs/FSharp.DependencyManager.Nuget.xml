<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.DependencyManager.Nuget</name></assembly>
<members>
<member name="M:FSDependencyManager.SR.version">
<summary>
 version
 (Originally from FSDependencyManager.txt:7)
</summary>
</member>
<member name="M:FSDependencyManager.SR.unableToApplyImplicitArgument(System.Int32)">
<summary>
 Unable to apply implicit argument number %d
 (Originally from FSDependencyManager.txt:4)
</summary>
</member>
<member name="M:FSDependencyManager.SR.timedoutResolvingPackages(System.String,System.String)">
<summary>
 Timed out resolving packages, process: &apos;%s&apos; &apos;%s&apos;
 (Originally from FSDependencyManager.txt:10)
</summary>
</member>
<member name="M:FSDependencyManager.SR.sourceDirectoryDoesntExist(System.String)">
<summary>
 The source directory &apos;%s&apos; not found
 (Originally from FSDependencyManager.txt:9)
</summary>
</member>
<member name="P:FSDependencyManager.SR.SwallowResourceText(System.Boolean)">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSDependencyManager.SR.requiresAValue(System.String)">
<summary>
 %s requires a value
 (Originally from FSDependencyManager.txt:3)
</summary>
</member>
<member name="M:FSDependencyManager.SR.notUsed">
<summary>
 Not used
 (Originally from FSDependencyManager.txt:5)
</summary>
</member>
<member name="M:FSDependencyManager.SR.missingTimeoutValue">
<summary>
 Missing value for timeout
 (Originally from FSDependencyManager.txt:12)
</summary>
</member>
<member name="M:FSDependencyManager.SR.loadNugetPackage">
<summary>
 Load Nuget Package
 (Originally from FSDependencyManager.txt:6)
</summary>
</member>
<member name="M:FSDependencyManager.SR.invalidTimeoutValue(System.String)">
<summary>
 Invalid value for timeout &apos;%s&apos;, valid values: none, -1 and integer milliseconds to wait
 (Originally from FSDependencyManager.txt:11)
</summary>
</member>
<member name="M:FSDependencyManager.SR.highestVersion">
<summary>
 with the highest version
 (Originally from FSDependencyManager.txt:8)
</summary>
</member>
<member name="P:FSDependencyManager.SR.SwallowResourceText">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSDependencyManager.SR.cantReferenceSystemPackage(System.String)">
<summary>
 PackageManager can not reference the System Package &apos;%s&apos;
 (Originally from FSDependencyManager.txt:2)
</summary>
</member>
<member name="M:FSDependencyManager.SR.RunStartupValidation">
<summary>
 Call this method once to validate that all known resources are valid; throws if not
</summary>
</member>
<member name="P:UtilsStrings.SR.SwallowResourceText(System.Boolean)">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="P:UtilsStrings.SR.SwallowResourceText">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:UtilsStrings.SR.fSharpBannerVersion(System.String,System.String)">
<summary>
 %s for F# %s
 (Originally from /home/dev/Projects/fsharp/src/Compiler/Facilities/UtilsStrings.txt:2)
</summary>
</member>
<member name="M:UtilsStrings.SR.buildProductName(System.String)">
<summary>
 Microsoft (R) F# Compiler version %s
 (Originally from /home/dev/Projects/fsharp/src/Compiler/Facilities/UtilsStrings.txt:1)
</summary>
</member>
<member name="M:UtilsStrings.SR.RunStartupValidation">
<summary>
 Call this method once to validate that all known resources are valid; throws if not
</summary>
</member>
<member name="T:FSharp.DependencyManager.Nuget.PackageBuildResolutionResult">
<summary>
 The result of building the package resolution files.
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.ResolveDependenciesResult.Success">
<summary>
 Succeded?
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.ResolveDependenciesResult.StdOut">
<summary>
 The resolution output log
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.ResolveDependenciesResult.StdError">
<summary>
 The resolution error log (process stderr)
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.ResolveDependenciesResult.SourceFiles">
<summary>
 The source code file paths
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.ResolveDependenciesResult.Roots">
<summary>
 The roots to package directories
     This points to the root of each located package.
     The layout of the package manager will be package manager specific.
     however, the dependency manager dll understands the nuget package layout
     and so if the package contains folders similar to the nuget layout then
     the dependency manager will be able to probe and resolve any native dependencies
     required by the nuget package.

 This path is also equivant to
     #I @&quot;c:\somepath\to\packages\ResolvedPackage\1.1.1\&quot;
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.ResolveDependenciesResult.Resolutions">
<summary>
 The resolution paths - the full paths to selected resolved dll&apos;s.
 In scripts this is equivalent to #r @&quot;c:\somepath\to\packages\ResolvedPackage\1.1.1\lib\netstandard2.0\ResolvedAssembly.dll&quot;
</summary>
</member>
<member name="T:FSharp.DependencyManager.Nuget.ResolveDependenciesResult">
<summary>
 The results of ResolveDependencies
</summary>
</member>
<member name="P:FSharp.DependencyManager.Nuget.Utilities.trimChars">
<summary>
 Return a string array delimited by commas
 Note that a quoted string is not going to be mangled into pieces.
</summary>
</member>
</members>
</doc>
