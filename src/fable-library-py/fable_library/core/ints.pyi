"""Stub file for Fable integer types."""

from typing import Any, Protocol, final

from typing_extensions import Self

class NumericInts(Protocol):
    """Protocol for Integer types"""

    def to_string(self, radix: int = 10) -> str: ...
    def __init__(self, value: int | NumericInts | float) -> None: ...
    def __add__(self, other: Any) -> Self: ...
    def __radd__(self, other: Any) -> Self: ...
    def __sub__(self, other: Any) -> Self: ...
    def __rsub__(self, other: Any) -> Any: ...
    def __mul__(self, other: Any) -> Self: ...
    def __rmul__(self, other: Any) -> Any: ...
    def __truediv__(self, other: NumericInts | int | float) -> Self: ...
    def __rtruediv__(self, other: NumericInts | int | float) -> Self: ...
    def __mod__(self, other: Any) -> Self: ...
    def __rmod__(self, other: Any) -> Any: ...
    def __neg__(self) -> Self: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __int__(self) -> int: ...
    def __index__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __lshift__(self, other: int | NumericInts) -> Self: ...
    def __rlshift__(self, other: int) -> Any: ...
    def __rshift__(self, other: int | NumericInts) -> Self: ...
    def __rrshift__(self, other: int) -> Any: ...
    def __floordiv__(self, other: NumericInts | int | float) -> Self: ...
    def __rfloordiv__(self, other: NumericInts | int | float) -> Self: ...
    def __and__(self, other: int | NumericInts) -> Self: ...
    def __rand__(self, other: int | NumericInts) -> Self: ...
    def __or__(self, other: int | NumericInts) -> Self: ...
    def __ror__(self, other: int | NumericInts) -> Self: ...
    def __xor__(self, other: int | NumericInts) -> Self: ...
    def __rxor__(self, other: int | NumericInts) -> Self: ...
    def __invert__(self) -> Self: ...
    def __abs__(self) -> Self: ...

@final
class UInt8(NumericInts): ...

@final
class Int8(NumericInts): ...

@final
class UInt16(NumericInts): ...

@final
class Int16(NumericInts): ...

@final
class UInt32(NumericInts): ...

@final
class Int32(NumericInts, int):
    # Note that this is not really a subclass of int
    ...

@final
class UInt64(NumericInts): ...

@final
class Int64(NumericInts): ...

__all__ = [
    "Int8",
    "Int16",
    "Int32",
    "Int64",
    "UInt8",
    "UInt16",
    "UInt32",
    "UInt64",
]
