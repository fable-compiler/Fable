"""Stub file for the Fable library core module.

This is only needed so that the static type checker can find the types for the extension
methods we have written in Rust. The file will never be used by Python at runtime.
"""

from typing import Any, Protocol, final

from typing_extensions import Self

from . import array

class Numeric(Protocol):
    def to_string(self, radix: int = 10) -> str: ...
    def __init__(self, value: int | Numeric | float) -> None: ...
    def __add__(self, other: Any) -> Self: ...
    def __radd__(self, other: Any) -> Self: ...
    def __sub__(self, other: Any) -> Self: ...
    def __rsub__(self, other: Any) -> Any: ...
    def __mul__(self, other: Any) -> Self: ...
    def __rmul__(self, other: Any) -> Any: ...
    def __truediv__(self, other: Numeric | int | float) -> Self: ...
    def __rtruediv__(self, other: Numeric | int | float) -> Self: ...
    def __mod__(self, other: Any) -> Self: ...
    def __rmod__(self, other: Any) -> Any: ...
    def __neg__(self) -> Self: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __int__(self) -> int: ...
    def __index__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __lshift__(self, other: int | Numeric) -> Self: ...
    def __rlshift__(self, other: int) -> Any: ...
    def __rshift__(self, other: int | Numeric) -> Self: ...
    def __rrshift__(self, other: int) -> Any: ...
    def __floordiv__(self, other: Numeric | int | float) -> Self: ...
    def __rfloordiv__(self, other: Numeric | int | float) -> Self: ...
    def __and__(self, other: int | Numeric) -> Self: ...
    def __rand__(self, other: int | Numeric) -> Self: ...
    def __or__(self, other: int | Numeric) -> Self: ...
    def __ror__(self, other: int | Numeric) -> Self: ...
    def __xor__(self, other: int | Numeric) -> Self: ...
    def __rxor__(self, other: int | Numeric) -> Self: ...
    def __invert__(self) -> Self: ...
    def __abs__(self) -> Self: ...

@final
class UInt8(Numeric): ...

@final
class Int8(Numeric): ...

@final
class UInt16(Numeric): ...

@final
class Int16(Numeric): ...

@final
class UInt32(Numeric): ...

@final
class Int32(Numeric, int):
    # Note that this is not really a subclass of int
    ...

@final
class UInt64(Numeric): ...

@final
class Int64(Numeric): ...

__all__: list[str] = [
    "Int8",
    "Int16",
    "Int32",
    "Int64",
    "UInt8",
    "UInt16",
    "UInt32",
    "UInt64",
    "array",
]
