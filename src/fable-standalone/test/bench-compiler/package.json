{
  "private": true,
  "type": "module",
  "scripts": {
    "clean": "git clean -fdX",

    "prebuild-lib-ts": "mkdir -p out-lib-ts && cp -r ../../../fable-library-ts/*.ts out-lib-ts && cp -r ../../../fable-library-ts/lib out-lib-ts",
    "build-lib-ts": "npm run $FABLE -- ../../../fable-library-ts/Fable.Library.TypeScript.fsproj --outDir ./out-lib-ts --fableLib ./out-lib-ts --lang TypeScript --exclude Fable.Core",
    "postbuild-lib-ts": "cp src/tsconfig.json out-lib-ts && npm run tsc -- -p ./out-lib-ts --outDir ./out-lib-js",

    "fable-cli": "dotnet run -c Release --project ../../../Fable.Cli",
    "prebuild-cli-js": "npm run clean && FABLE=fable-cli npm run build-lib-ts",
    "build-cli-js": "npm run fable-cli -- src/bench-compiler.fsproj --outDir ./out-node --fableLib ./out-lib-js",
    "postbuild-cli-js": "npm run rollup-bundle",

    "fable": "dotnet run -c Release --project src/bench-compiler.fsproj",
    "prebuild-js": "npm run clean && FABLE=fable npm run build-lib-ts",
    "prebuild-ts": "npm run clean && FABLE=fable npm run build-lib-ts",
    "build-js": "npm run fable -- src/bench-compiler.fsproj --outDir ./out-node --fableLib ./out-lib-js",
    "build-ts": "npm run fable -- src/bench-compiler.fsproj --outDir ./out-ts --fableLib ./out-lib-ts --lang TypeScript",
    "build-opt": "npm run build-js -- --optimize",
    "postbuild-js": "npm run rollup-bundle",
    "postbuild-ts": "cp src/tsconfig.json out-ts && npm run tsc -- -p ./out-ts --outDir ./out-js",

    "fable-node": "node --stack_size=1200 out-node/app.js",
    "fable-bundle": "node --stack_size=1200 dist/bundle.js",
    "build-node": "npm run fable-node -- src/bench-compiler.fsproj --outDir ./out-node2 --fableLib ./out-lib-js",
    "build-bundle": "npm run fable-bundle -- src/bench-compiler.fsproj --outDir ./out-node2 --fableLib ./out-lib-js",
    "benchmark-node": "npm run fable-node -- src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "benchmark-bundle": "npm run fable-bundle -- src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",

    "publish-native": "cd src && dotnet publish -c Release -r linux-x64 & echo \u001B[35m Needs PublishAot enabled in project!",
    "prefable-native": "npm run publish-native",
    "fable-native": "src/bin/Release/net8.0/linux-x64/native/bench-compiler",
    "prebuild-native-js": "FABLE=fable-native npm run build-lib-ts",
    "build-native-js": "npm run fable-native -- src/bench-compiler.fsproj --outDir ./out-node --fableLib ./out-lib-js",
    "build-test-native-js": "npm run fable-native -- ../../../../../fable-test/fable-test.fsproj --outDir ./out-test",
    "build-tests-native-js": "npm run fable-native -- ../../../../tests/Js/Main/Fable.Tests.fsproj --outDir ./out-tests",

    "publish-wasm": "cd src && dotnet publish -c Release /p:RunAOTCompilation=true /p:RuntimeIdentifier=browser-wasm",
    "prefable-wasm": "npm run publish-wasm",
    "fable-wasm": "node src/bin/Release/net8.0/browser-wasm/AppBundle/main.mjs",
    "prebuild-wasm-js": "FABLE=fable-wasm npm run build-lib-ts",
    "build-wasm-js": "npm run fable-wasm -- src/bench-compiler.fsproj --outDir ./out-node --fableLib ./out-lib-js",

    "rollup-bundle": "npm run rollup -- out-node/app.js -o dist/bundle.js --format esm",
    "terser-bundle": "npm run terser -- dist/bundle.js -o dist/bundle.min.js --mangle --compress",
    "webpack-bundle": "npm run webpack -- -p --entry ./out-node/app.js --output ./dist/bundle.min.js --target node",

    "prebuild-test-js": "npm run clean && FABLE=fable npm run build-lib-ts",
    "prebuild-test-ts": "npm run clean && FABLE=fable npm run build-lib-ts",
    "build-test-js": "npm run fable -- ../../../../../fable-test/fable-test.fsproj --outDir ./out-test --fableLib ./out-lib-js --sourceMaps",
    "build-test-ast": "npm run fable -- ../../../../../fable-test/fable-test.fsproj --outDir ./out-test --fableLib ./out-lib-js --printAst",
    "build-test-ts": "npm run fable -- ../../../../../fable-test/fable-test.fsproj --outDir ./out-test-ts --fableLib ./out-lib-ts --lang TypeScript",
    "build-test-opt": "npm run build-test-js -- --optimize",
    "build-test-node-js": "npm run fable-node -- ../../../../../fable-test/fable-test.fsproj --outDir ./out-test --fableLib ./out-lib-js --sourceMaps",
    "build-test-node-ts": "npm run build-test-node --lang TypeScript",
    "postbuild-test-js": "node ./out-test/src/main.js",
    "postbuild-test-ts": "cp src/tsconfig.json out-test-ts && npm run tsc -- -p out-test-ts --outDir ./out-test-js",

    "prebuild-tests-js": "npm run clean && FABLE=fable npm run build-lib-ts",
    "prebuild-tests-ts": "npm run clean && FABLE=fable npm run build-lib-ts",
    "build-tests-js": "npm run fable -- ../../../../tests/Js/Main/Fable.Tests.fsproj --outDir ./out-tests --fableLib ./out-lib-js --sourceMaps",
    "build-tests-ts": "npm run build-tests-js -- --fableLib ./out-lib-ts --lang TypeScript",
    "build-tests-opt": "npm run build-tests-js -- --optimize",
    "build-tests-node": "npm run fable-node -- ../../../../tests/Js/Main/Fable.Tests.fsproj --outDir ./out-tests --fableLib ./out-lib-js --sourceMaps",
    "postbuild-tests-js": "npm run mocha -- out-tests --colors --reporter dot -t 10000",

    "build-tests-rust": "npm run fable -- ../../../../tests/Rust/Fable.Tests.Rust.fsproj --outDir ./out-tests-rust --fableLib ./out-lib-rust --lang Rust",
    "build-tests-dart": "npm run fable -- ../../../../tests/Dart/src/Fable.Tests.Dart.fsproj --outDir ./out-tests-dart --fableLib ./out-lib-dart --lang Dart",
    "build-tests-python": "npm run fable -- ../../../../tests/Python/Fable.Tests.Python.fsproj --outDir ./out-tests-python --fableLib ./out-lib-python --lang Python",
    "build-tests-rust-node": "npm run fable-node -- ../../../../tests/Rust/Fable.Tests.Rust.fsproj --outDir ./out-tests-rust --fableLib ./out-lib-rust --lang Rust",
    "build-tests-dart-node": "npm run fable-node -- ../../../../tests/Dart/src/Fable.Tests.Dart.fsproj --outDir ./out-tests-dart --fableLib ./out-lib-dart --lang Dart",
    "build-tests-python-node": "npm run fable-node -- ../../../../tests/Python/Fable.Tests.Python.fsproj --outDir ./out-tests-python --fableLib ./out-lib-python --lang Python",

    "tsc-lib-init": "npm run tsc -- --init --target es2020 --module es2020 --allowJs",

    "tsc": "node ../../../../node_modules/typescript/bin/tsc",
    "babel": "node ../../../../node_modules/@babel/cli/bin/babel",
    "mocha": "node ../../../../node_modules/mocha/bin/mocha",
    "rollup": "node ../../../../node_modules/rollup/dist/bin/rollup",
    "terser": "node ../../../../node_modules/terser/bin/terser",
    "webpack": "node ../../../../node_modules/webpack-cli/bin/cli.js",
    "splitter": "node ../../../../node_modules/fable-splitter/dist/cli",

    "perf": "perf record -q -e cpu-clock -F 99 -g -- node --perf-basic-prof --interpreted-frames-native-stack dist/bundle.js src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "perf-es": "perf record -q -e cpu-clock -F 99 -g -- node --perf-basic-prof --interpreted-frames-native-stack ./out-node/app.js src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "perf-native": "perf record -q -e cpu-clock -F 997 -g -- ./src/bin/Release/net8.0/linux-x64/native/bench-compiler src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "perf-report": "perf report -n --stdio -g srcline -s dso,sym,srcline --inline > perf-report.log",
    "perf-script": "perf script -F +pid > perf-script.perf",
    "profile": "node --prof out-node/app.js src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "cpu-prof": "node --cpu-prof --cpu-prof-dir=out-prof out-node/app.js src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "heap-prof": "node --heap-prof out-node/app.js src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "prof-process": "node --prof-process isolate-*.log > profile.log",
    "prof-preprocess": "node --prof-process --preprocess isolate-*.log > profile.v8log.json",
    "speedscope": "speedscope profile.v8log.json",
    "flamegraph": "perf script | ../../../../../FlameGraph/stackcollapse-perf.pl | ../../../../../FlameGraph/flamegraph.pl > perf.svg",
    "trace-node": "node --trace-deopt out-node/app.js src/bench-compiler.fsproj --outDir ./out-node2 > deopt.log",
    "trace-rust": "dotnet trace collect --duration 00:00:01:00 --format speedscope -- dotnet src/bin/Release/net8.0/bench-compiler.dll ../../../../tests/Rust/Fable.Tests.Rust.fsproj --outDir ./out-tests-rust --fableLib ./out-lib-rust --lang Rust",
    "heaptrack-native": "heaptrack ./src/bin/Release/net8.0/linux-x64/native/bench-compiler src/bench-compiler.fsproj --outDir ./out-node2 --benchmark",
    "heaptrack-print": "heaptrack_print heaptrack.*.gz -F heap_alloc.log",
    "heaptrack-flamegraph": "../../../../../FlameGraph/flamegraph.pl --title \"heaptrack: allocations\" --colors mem --countname allocations < heap_alloc.log > heap_alloc.svg",
    "coz": "coz run --- ./src/bin/Release/net8.0/linux-x64/native/bench-compiler src/bench-compiler.fsproj --outDir ./out-node2 --benchmark"
  }
}
