import { FSharpRef } from "./Types.js";
import { comparePrimitives } from "./Util.js";
export type TimeSpan = number;
export declare function create(d?: number, h?: number, m?: number, s?: number, ms?: number): number;
export declare function fromTicks(ticks: number | bigint): number;
export declare function fromDays(d: number): number;
export declare function fromHours(h: number): number;
export declare function fromMinutes(m: number): number;
export declare function fromSeconds(s: number): number;
export declare function days(ts: TimeSpan): number;
export declare function hours(ts: TimeSpan): number;
export declare function minutes(ts: TimeSpan): number;
export declare function seconds(ts: TimeSpan): number;
export declare function milliseconds(ts: TimeSpan): number;
export declare function ticks(ts: TimeSpan): bigint;
export declare function totalDays(ts: TimeSpan): number;
export declare function totalHours(ts: TimeSpan): number;
export declare function totalMinutes(ts: TimeSpan): number;
export declare function totalSeconds(ts: TimeSpan): number;
export declare function negate(ts: TimeSpan): number;
export declare function add(ts1: number, ts2: number): number;
export declare function subtract(ts1: number, ts2: number): number;
export declare function multiply(ts: TimeSpan, factor: number): number;
export declare function divide(ts: TimeSpan, b: number): number;
export declare const op_Addition: typeof add;
export declare const op_Subtraction: typeof subtract;
export declare const op_Multiply: typeof multiply;
export declare const op_Division: typeof divide;
export declare const compare: typeof comparePrimitives;
export declare const compareTo: typeof comparePrimitives;
export declare function duration(x: number): number;
export declare function toString(ts: TimeSpan, format?: string, _provider?: any): string;
export declare function parse(str: string): number;
export declare function tryParse(v: string, defValue: FSharpRef<number>): boolean;
