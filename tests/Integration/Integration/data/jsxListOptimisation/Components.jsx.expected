import * as react from "react";
import { empty, map, singleton, append, delay, toList } from "./fable_modules/fable-library-js.5.0.0-alpha.13/Seq.js";
import { createJsxEntries, int32ToString } from "./fable_modules/fable-library-js.5.0.0-alpha.13/Util.js";
import { rangeDouble } from "./fable_modules/fable-library-js.5.0.0-alpha.13/Range.js";
import { singleton as singleton_1 } from "./fable_modules/fable-library-js.5.0.0-alpha.13/List.js";

export const React = react;

export const divWithText = <div>
    Test 1
</div>;

export const divWithNestedList = <div>
    <div>
        Test 1
    </div>
    <div>
        Test 2
    </div>
</div>;

export const divWithMultipleNestedList = <div>
    <div>
        Test 1
    </div>
    <div>
        Test 2
    </div>
</div>;

export const divWithMixOfElementAndList = <div>
    <div>
        Test 1
    </div>
    <div>
        Test 2
    </div>
</div>;

export const multiLevelMixOfElementAndList = <div>
    <div>
        Test 1
    </div>
    <div>
        Test 2
    </div>
    <div>
        <div>
            Test 2.1
        </div>
        <div>
            Test 2.2
        </div>
    </div>
</div>;

export const divWithOptimisedTrueCondition = <div>
    <div>
        true
    </div>
</div>;

export const divWithOptimisedFalseCondition = <div>
    <div>
        false
    </div>
</div>;

export function divWithConditionalChildren(a) {
    return <div>
        {(a === "b") ? (<div>
            true
        </div>) : (<div>
            false
        </div>)}
    </div>;
}

export const divWithForLoop = <div>
    <div>
        Hello
    </div>
    {map((i) => <div key={int32ToString(i)}>
        {i}
    </div>, rangeDouble(0, 1, 2))}
</div>;

export const divWithFragment = <div>
    <>
        <div>
            Test 1
        </div>
    </>
</div>;

export const divWithAttributes = <div className="header">
    <div>
        Test 1
    </div>
</div>;

export function divWithConditionalWithoutElseBranchWorks(show) {
    return <div>
        {show ? (<div>
            I show sometimes!
        </div>) : (undefined)}
        <div>
            I show always!
        </div>
    </div>;
}

export const propsCanUseUnbox = <div id="myid" />;

export function propertiesCanBeConditional(a) {
    return <div{...Object.fromEntries([(a === "b") ? (["className", "success"]) : (["className", "error"]), ["children", singleton_1("See my color for the result")]])}/>;
}

export function multiLevelOfConditionalForPropsAndChildrenWorks(a, b, c) {
    return <div{...Object.fromEntries([(a === 1) ? (["className", "first-level"]) : ([]), ["children", toList(delay(() => ((b === 1) ? singleton(<div>
        B condition is true
    </div>) : singleton(<div>
        <div>
            B condition is false
        </div>
        {(c === 1) ? (<div>
            But C condition is true
        </div>) : (undefined)}
    </div>))))]])}/>;
}
